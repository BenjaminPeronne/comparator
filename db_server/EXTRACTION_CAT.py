import pandas as pd
import psycopg2

# Liste des fichiers Excel √† traiter (ajoutez les chemins ici)
file_paths = [
    "/Users/benjaminperonne/Documents/Developer/University_Developer/M2_S9_MIAGE/Projet/comparator/db_server/src/BQP CARREFOUR MILENIS NOV 2019.xls",
    "/Users/benjaminperonne/Documents/Developer/University_Developer/M2_S9_MIAGE/Projet/comparator/db_server/src/BQP HYPER CASINO ST FRANCOIS NOV 2019.xls",
    "/Users/benjaminperonne/Documents/Developer/University_Developer/M2_S9_MIAGE/Projet/comparator/db_server/src/BQP SUPER U SAINTE-ROSE  NOV 2019.xls"
]

# Ensemble pour stocker les familles uniques et √©viter les doublons dans l'extraction
families_set = set()

try:
    print("üîÑ D√©but de l'extraction des fichiers Excel...")

    for file_path in file_paths:
        print(f"üìÇ Traitement du fichier : {file_path}")
        engine = "xlrd" if file_path.endswith(".xls") else "openpyxl"
        # Charger le fichier Excel
        xls = pd.ExcelFile(file_path, engine=engine)

        # Lire la premi√®re feuille
        df = pd.read_excel(xls, sheet_name=xls.sheet_names[0], header=None)

        # Extraire la premi√®re colonne contenant les familles de produits
        first_column = df.iloc[:, 0].dropna().astype(str).str.strip()

        # Filtrer les familles de produits (exclure "TOTAL" et "FAMILLE DE PRODUITS")
        file_families = {row for row in first_column if row.isupper() and len(row) > 2 and row not in ["TOTAL", "FAMILLE DE PRODUITS","MONTANT MAXIMUM 180‚Ç¨"]}

        # Ajouter au set global pour √©viter les doublons
        families_set.update(file_families)

    # Convertir en DataFrame pour l'insertion
    df_families = pd.DataFrame(sorted(families_set), columns=["label"])

    print("‚úÖ Extraction r√©ussie. Familles de produits d√©tect√©es :")
    print(df_families)

    # Connexion √† PostgreSQL
    print("üîÑ Tentative de connexion √† PostgreSQL...")

    conn = psycopg2.connect(
        dbname="postgres",      # Nom de la base de donn√©es
        user="postgres",        # Nom d'utilisateur PostgreSQL
        password="postgres",    # Mot de passe PostgreSQL
        host="localhost",       # 'localhost' car on se connecte depuis l'h√¥te (Docker -> Host)
        port="5433"             # Utiliser le port externe 5440 (√† adapter si n√©cessaire)
    )

    cursor = conn.cursor()
    print("‚úÖ Connexion r√©ussie √† PostgreSQL.")

    # 1Ô∏è‚É£ SUPPRIMER TOUTES LES DONN√âES AVANT INSERTION
    print("üóëÔ∏è Suppression de toutes les entr√©es existantes dans la table 'categories'...")
    cursor.execute("DELETE FROM categories;")
    conn.commit()  # Valider la suppression

    # 2Ô∏è‚É£ INS√âRER LES NOUVELLES VALEURS
    print("‚úÖ Insertion des nouvelles donn√©es...")

    query = "INSERT INTO categories (label) VALUES (%s) ON CONFLICT (label) DO NOTHING"
    cursor.executemany(query, [(label,) for label in df_families["label"]])

    conn.commit()
    
    print("‚úÖ Donn√©es ins√©r√©es avec succ√®s dans PostgreSQL (ancienne table vid√©e avant).")

except psycopg2.OperationalError as e:
    print(f"‚ùå Erreur de connexion √† PostgreSQL : {str(e)}")

except Exception as e:
    print(f"‚ùå Erreur inattendue : {str(e)}")

finally:
    if 'cursor' in locals():
        cursor.close()
    if 'conn' in locals():
        conn.close()
